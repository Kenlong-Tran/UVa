import java.util.ArrayDeque;
import java.util.Scanner;

public class Main {
	static int[][] table;
	static ArrayDeque<Integer> queue;
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		while (scan.hasNext())
		{
			String initial = scan.next();
			String end = scan.next();
			int x1 = convert(initial.charAt(0));
			int y1 = Integer.valueOf(String.valueOf(initial.charAt(1))) - 1;
			int x2 = convert(end.charAt(0));
			int y2 = Integer.valueOf(String.valueOf(end.charAt(1))) - 1;
			table = new int [8][8];
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
				{
					table[i][j] = -1;
				}
			}
			int answer = search(x1,y1,x2,y2);
			System.out.println("To get from " + initial + " to " + end + " takes " + answer + " knight moves.");

		}
		scan.close();
	}
	private static int search(int x1, int y1, int x2, int y2) {
		queue = new ArrayDeque<Integer>();
		queue.add(x1);
		queue.add(y1);
		table[x1][y1] = 0;
		int currentX;
		int currentY;
		while (!queue.isEmpty())
		{
			currentX = queue.remove();
			currentY = queue.remove();
			if (currentX == x2 && currentY == y2)
			{
				return table[currentX][currentY];
			}
			else
			{
				if (isValid(currentX + 1) && isValid(currentY + 2))
				{
					if (table[currentX + 1][currentY + 2] == -1)
					{
						queue.add(currentX + 1);
						queue.add(currentY + 2);
						table[currentX + 1][currentY + 2] = table[currentX][currentY] + 1;
					}
				}
				if (isValid(currentX + 1) && isValid(currentY - 2))
				{
					if (table[currentX + 1][currentY - 2] == -1)
					{
						queue.add(currentX + 1);
						queue.add(currentY - 2);
						table[currentX + 1][currentY - 2] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX - 1) && isValid(currentY + 2))
				{
					if (table[currentX - 1][currentY + 2] == -1)
					{
						queue.add(currentX - 1);
						queue.add(currentY + 2);
						table[currentX - 1][currentY + 2] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX - 1) && isValid(currentY - 2))
				{
					if (table[currentX - 1][currentY - 2] == -1)
					{
						queue.add(currentX - 1);
						queue.add(currentY - 2);
						table[currentX - 1][currentY - 2] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX + 2) && isValid(currentY + 1))
				{
					if (table[currentX + 2][currentY + 1] == -1)
					{
						queue.add(currentX + 2);
						queue.add(currentY + 1);
						table[currentX + 2][currentY + 1] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX - 2) && isValid(currentY + 1))
				{
					if (table[currentX - 2][currentY + 1] == -1)
					{
						queue.add(currentX - 2);
						queue.add(currentY + 1);
						table[currentX - 2][currentY + 1] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX + 2) && isValid(currentY - 1))
				{
					if (table[currentX + 2][currentY - 1] == -1)
					{
						queue.add(currentX + 2);
						queue.add(currentY - 1);
						table[currentX + 2][currentY - 1] = table[currentX][currentY] + 1;					}
				}
				if (isValid(currentX - 2) && isValid(currentY - 1))
				{
					if (table[currentX - 2][currentY - 1] == -1)
					{
						queue.add(currentX - 2);
						queue.add(currentY - 1);
						table[currentX - 2][currentY - 1] = table[currentX][currentY] + 1;					}
				}
			}
		}

		return -1;
	}
	public static boolean isValid (int position)
	{
		return (0 <= position && position <=7);
	}
	public static int convert(char position)
	{
		if (position == 'a')
		{
			return 0;
		}
		else if (position == 'b')
		{
			return 1;
		}
		else if (position == 'c')
		{
			return 2;
		}
		else if (position == 'd')
		{
			return 3;
		}
		else if (position == 'e')
		{
			return 4;
		}
		else if (position == 'f')
		{
			return 5;
		}
		else if (position == 'g')
		{
			return 6;
		}
		else if (position == 'h')
		{
			return 7;
		}
		else
		{
			return -1;
		}
	}
}