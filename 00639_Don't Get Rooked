import java.util.Scanner;

class Main {

	static int maximum;
	static int size;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		while (scan.hasNext()) {
			size = scan.nextInt();
			if (size == 0) {
				break;
			} else {
				int[][] board = new int[size][size];
				for (int i = 0; i < size; i++) {
					String line = scan.next();
					for (int j = 0; j < size; j++) {
						char value = line.charAt(j);
						if (value == 'X') {
							board[i][j] = -1;
						} else {
							board[i][j] = 0;
						}
					}
				}
				maximum = 0;
				search(board, 0, 0, 0);
				System.out.println(maximum);
			}
		}
		scan.close();
	}

	private static void search(int[][] board, int i, int j, int rooks) {
		if (board[i][j] == -1) {
			if (i < size - 1) {
				search(board, i + 1, j, rooks);
			} else {
				if (j < size - 1) {
					search(board, 0, j + 1, rooks);
				}
			}
		} else {
			if (possible(board, i, j)) {
				board[i][j] = 1;
				if (i < size - 1) {
					search(board, i + 1, j, rooks + 1);
				} else {
					if (j < size - 1) {
						search(board, 0, j + 1, rooks + 1);
					}
				}
				if (rooks + 1 > maximum) {
					maximum = rooks + 1;
				}
			}
			board[i][j] = 0;
			if (i < size - 1) {
				search(board, i + 1, j, rooks);
			} else {
				if (j < size - 1) {
					search(board, 0, j + 1, rooks);
				}
			}
		}
	}

	private static boolean possible(int[][] board, int i, int j) {
		int count = i;
		while (count >= 0 && board[count][j] != -1) {
			if (board[count][j] == 1) {
				return false;
			}
			count--;
		}
		count = i;
		while (count < size && board[count][j] != -1) {
			if (board[count][j] == 1) {
				return false;
			}
			count++;
		}
		count = j;
		while (count >= 0 && board[i][count] != -1) {
			if (board[i][count] == 1) {
				return false;
			}
			count--;
		}
		count = j;
		while (count < size && board[i][count] != -1) {
			if (board[i][count] == 1) {
				return false;
			}
			count++;
		}
		return true;
	}
}